/**
 @page def_simu Model Definition & Simulation
 
 In the following we will give a detailed overview how to specify models in GenSSI and how to call the code for analyzing the model. We use the Goodwin oscillator as an example.
 
 @section definition Model Definition
 
 This manual will guide the user to specify models in MATLAB. For example implementations, see the models in the example directory.
 
 @subsection header Header
 
 The model definition needs to be defined as a function which returns a struct with all symbolic definitions and options.
 
 @code function [model] = Goodwin() @endcode

 @subsection name Name

 Give the model a name.

 @code model.Name = 'Goodwin'; @endcode

 The name will be used to create a subdirectory in the Results directory where the results of analysis will be stored.
 
 @subsection derivatives Derivatives
 
 Set the number of derivatives to be calculated.

 @code model.Nder = 8; @endcode
 
 @subsection variables Variables
 
 Create the respective symbolic variables. The name of the symbolic variable can be chosen arbitrarily.
 
 @code syms x1 x2 x3 @endcode
 
 Create the state vector containing all states:
 
 @code model.X = [x1 x2 x3]; @endcode

 Define the number of variables.

 @code model.Neq = 3; @endcode
 
 @subsection parameters Parameters
 
 Create the respective symbolic variables. The name of the symbolic variable can be chosen arbitrarily.
 
 @code syms p1 p2 p3 p4 p5 p6 p7 p8 @endcode
 
 Create the parameters vector of parameters to be considered for identifiability.
 
 @code model.Par = [p1 p2 p3 p4 p5 p6 p7 p8]; @endcode

 Specify the number of parameters to be considered for identifiability.

 @code model.Npar = 8; @endcode

 @subsection equtions Equations

 Define the vector field of the model.

 @code
 A1 = -p4*x1+p1/(p2+x3^p3);
 A2 = p5*x1-p6*x2;
 A3 = p7*x2-p8*x3;
 model.F=[A1 A2 A3];
 @endcode

 @subsection controls Controls

 Define the controls.

 @code
 g1=0;
 g2=0;
 g3=0;
 model.G=[g1 g2 g3];
 @endcode

 Define the number of controls.

 @code model.Noc = 0; @endcode

 The matrix G has as many columns as there are state variables and as many rows as there are inputs.


 @subsection obserables Observables

 Define the observables.

 @code
 h1 = x1;
 h2 = x2;
 h3 = x3;
 model.H = [h1 h2 h3];
 @endcode

 Define the number of obserables.

 @code model.Nobs = 1; @endcode

 @subsection ic Initial Conditions

 Define the initial conditions. The initial conditions can be fixed numerical values or a function of model parameters.


 @code model.IC = [0.3 0.9 1.3];@endcode
  
 @section analysis Model Analysis
 
 The structural identifiability of the model can be analyzed by calling the MATLAB function genssiMain. The first parameter of genssiMain is the name of the model, and the second parameter is the format. If the format is absent, the model is assumed to be a function, as described above. If it is equal to 'mat', the model is assumed to be a MATLAB file with name Modelname.mat (e.g. Goodwin.mat) and containing the model struct.
 
 @code
 genssiMain('Goodwin')
 @endcode
 
 The function genssiMain will call the model function or load the .mat file, which puts the model struct in memory. After that, it will call all other GenSSI functions required to analyze the model. The results will be put into a directory created using the name of the model and the next available run number, for example GenSSI/Results/Goodwin/run3.

 The results include a results file, with the name 'model_information.txt', and all identifiiability tableaus created during analysis, in MATLAB format, for example 'Figure1.fig'. 

 It is not necessary to analyze the identifiability tableaus unless you are looking for deeper insight into the structure of the model and its identifiability characteristics. They are described in more detail in:

 - Chis, O.-T., J. R. Banga, et al. (2011). "Structural Identifiability of Systems Biology Models: A Critical Comparison of Methods." PLoS ONE 6(11): e27755.

 - Balsa-Canto, E., A. Alonso, et al. (2010). "An iterative identification procedure for dynamic modeling of biochemical networks." BMC Syst Biol 4(1): 11.

 The identifiability tableaus are binary versions of the Jacobian matrix, and help in determining identifiability of parameters during the analysis process.  Columns consisting solely of zeros indicate that the respective parameter cannot be identified. Rows consisting solely of zeros provide no information and are deleted. Rows consisting of a single one indicate identifiability, and rows consisting or two or more ones indicate that there are relations that might be solved to provide identifiability. 

 The results file 'model_information.txt' contains the main output of the identifiability analysis of GenSSI. It begins by documenting the primary features of the model and ends by stating which parameters are locally or globally identifiable. The middle part, which can be skipped during a first reading, documents the steps taken during analysis and which relations were solved to determine identifiability of individual parameters. Here is an example of the final part of this file for the Goodwin model used as an example in this reference manual:

 @code
***************************************************************

 -----> THE MODEL IS STRUCTURALLY LOCALLY IDENTIFIABLE 

***************************************************************

        The structurally globally identifiable parameters are: 

         	None

        The structurally locally identifiable parameters are: 

     	[      p1	      p2	      p4	      p5	      p6	      p7	      p8	]


Report results elapsed time: 0.04445
Total elapsed time: 3.4703
 @endcode

 @section conversion Conversion Utilities

 The GenSSI package also includes some functions for converting models from one format to another.

 @subsection poly Convert to Polynomial Format

 @code genssiToPolynomial(modelNameIn,modelNameOut) @endcode

 genssiToPolynomial converts a model, expressed in terms of rational expressions, to pure polynomial format. This increases the number of state variables, but can sometimes significantly reduce the computational overhead for analyzing the model.

 modeNameIn: name of model to be converted (string).

 modelNameOut: name of model to be created (string).

 @subsection multiexp Create Multi-Experiment Model

 @code genssiMultiExperiment(modelNameIn,fileFormat,mExDef,modelNameOut) @endcode

 genssiMultiExperiment converts a GenSSI model to a new GenSSI model based on a multi-experiment definition.

 modelNameIn: the name of the input model (a string).

 fileFormat: either 'function' (default), if the model is a MATLAB function, or 'mat', if the model is a .mat file.

 mExDef: the name of a multi-experiment definition file (string).

 modelNameOut: the name of the output model (a string).

 GenSSI 2.0 supports structural identifiability analysis for systems with multiple experimental conditions. As the information content of an individual experiment is often limited, in most applications, multiple experiments are performed. These experiments usually differ in the experimental conditions, meaning that different initial conditions, perturbations or control inputs are used. This increases the amount of information and thereby the identifiability of the parameters.

 To perform structural identifiability analysis for problems with multiple experimental conditions, GenSSI provides the MATLAB function genssiMulitEpxeriment, which generates a (multi-experiment) GenSSI model for a single experimental condition and a description of the changes in the experimental conditions.

 To illustrate the functionality, we considered a model for mRNA  transfection, accounting for translation and degradation. The model definition is:

 @code
 function model = M1_1_U2()
     model.Name='M1_1_U1';
     syms  m G d b kTL m0
     model.Nder=4;
     model.X=[m G];
     model.Neq=2;
     A1=-d*m;
     A2=0;
     model.F=[A1 A2];
     model.G=[0,kTL*m;...
              0,-b*G];
     model.Noc=2;
     h1=G;
     model.H=[h1];
     model.Nobs=1;
     model.IC=[m0 0];
     model.P=[d b kTL m0];
     model.Par=[d b kTL m0];
     model.Npar=4;
 end
 @endcode

 The variables (model.X) are m (the level of mRNA) and G (the level of GFP, green fluorescent protein), of which only G is observed (model.H).  The differential equations (model.F) define degradation of mRNA (-d*m), degradation of GFP (-b*G) and translation of mRNA to GFP (kTL*m).  Note that translation and GFP degradation have been defined as controls (model.G).

 Based on this model, we define a total of four experimental conditions, in the experiment definition function.  The expriments are defined by modifying the controls and the initial conditions. The expriments are:

 1) original configuration

 2) change in transfection (m0) via IC: The initial concentration of mRNA is changed.

 3) change in translation via control u1 = uInh: The rate of translation is changed, for example by treating the cell with CHX (the antiseptic chlorhexidine).

 4) change in GFP degradation via control u2 = uDeg: The rate of GFP degradation is changed, for example by using destabilized GFP (d2eGFP) instead of normal GFP (eGFP).

The experiment definition is:

 @code
 function multiExp = M1_1_eDef4()
     multiExp.Name='M1_1_eDef4';
     syms d b kTL m0Exp1
     multiExp.Nexp=4;
     multiExp.U = [1,1;...
                   1,1;...
                   .5,1;...
                   1,.75];
     multiExp.IC = [m0Exp1,0,...
                    0.5*m0Exp1,0,...
                    m0Exp1,0,...
                    m0Exp1,0];
     multiExp.P=[d,b,kTL,m0Exp1];
     multiExp.Par=[d,b,kTL,m0Exp1];
 end
 @endcode

 The number of expriments is coded in multiExp.Nexp=4.

 The variable multiExp.U defines the changes in the controls and the variable multiExp.IC defines the changes in the initial conditions.  Both of these variables contain one row for each experiment and one column for each state variable. In the first experiment (original configuration), the controls are 1 and the initial mRNA concentration is m0Exp1.  In the second expriment (change in transfection), the initial concentration of mRNA is changed.  In the third experiment (change in translation), the rate of translation is changed by changing the value of the first control.  In the fourth experiment (change in GFP degradation), the rate of GFP degradation is changed by changing the value of the second control.

 The original model is converted to the multi-experiment model by means of this line of code:

 @code genssiMultiExperiment('M1_1_U2','function','M1_1_eDef4','M1_1_ME4'); @endcode

 The result of the conversion is the following (multi-experiment) model:

 @code
 function model = M1_1_ME4()
     syms mExp1 GExp1 mExp2 GExp2 mExp3 GExp3 mExp4 GExp4
     syms d b kTL m0Exp1
     model.Name = 'M1_1_ME4';
     model.Nder = 4;
     model.X = [mExp1,GExp1,mExp2,GExp2,mExp3,GExp3,mExp4,GExp4];
     model.Neq = 8;
     model.G = [0,0,0,0,0,0,0,0];
     model.Noc = 0;
     model.P = [d,b,kTL,m0Exp1];
     model.Par = [d,b,kTL,m0Exp1];
     model.Npar = 4;
     model.IC = [m0Exp1,0,m0Exp1/2,0,m0Exp1,0,m0Exp1,0];
     model.H = [GExp1,GExp2,GExp3,GExp4];
     model.Nobs = 4;
     model.F = [-d*mExp1,...
                kTL*mExp1 - GExp1*b,...
                -d*mExp2,...
                kTL*mExp2 - GExp2*b,...
                -d*mExp3,...
                (kTL*mExp3)/2 - GExp3*b,...
                -d*mExp4,...
                kTL*mExp4 - (3*GExp4*b)/4];
 end
 @endcode

 Based on the original 2 state variables and 4 experiments, we now have 2*4=8 state variables (model.X).
 
 @subsection transf Transform Model

 @code genssiTransformation(modelNameIn,fileFormat,transDef,modelNameOut) @endcode

 genssiTransformation converts a GenSSI model to a new GenSSI model based on a transformation definition.

 modelNameIn: the name of the input model (a string).

 fileFormat: either 'function' (default), if the model is a MATLAB function, or 'mat', if the model is a .mat file.

 transDef: the name of a transformation definition file (string).

 modelNameOut: the name of the output model (a string).

 When we analyze equations for the purpose of determining identifiability, it is sometimes useful to make two changes.  The first change is removing redundant equations, which can reduce the number of state variables and the number of parameters.  The second change is rescaling the variables, which can reduce the number of parameters. Both of these changes are supported by genssiTransformation.

 We begin with a model for mRNA, including translation and degradation. In contrast with the simpler model used for the multi-experiment conversion (above), this model involves mRNA degradation via the action of an enzyme. The model definition is:

 @code
 function model = M2_1_Y1()
     model.Name='M2_1_Y1';
     syms m G E1 mE d1 d2 d3 b kTL m0 E0
     model.Nder=8;
     model.Neq=4;
     model.Npar=7;
     model.Noc=0;
     model.Nobs=1;
     model.X=[m G E1 mE];
     A1=-d1*m-d2*m*E1;
     A2=+kTL*m-b*G;
     A3=+d3*mE-d2*m*E1;
     A4=-d3*mE+d2*m*E1;
     model.F=[A1 A2 A3 A4];
     g1=0;g2=0;g3=0;g4=0;
     model.G=[g1 g2 g3 g4];
     h1=G;
     model.H=[h1];
     model.IC=[m0 0 E0 0];    
     model.P=[d1 d2 d3 b kTL m0 E0];
     model.Par=[d1 d2 d3 b kTL m0 E0];
 end
 @endcode

 The state variables in this model (model.X) are mRNA (m), GFP (G), enzyme (E1), and the mRNA-enzyme complex (mE).  We have used E1 as the name of the enzyme instead of E since there are cases where MATLAB will treat the symbolic variable E as e or exp(1).  The differential equations show mRNA (m) decreasing due to degradation (-d1*m) and decreasing due to complexation (-d2*m*E1).  GFP (G) increases due to translation (kTL*m) and decreases due to complexation (-d2*m*E1). The enzyme (E1) decreases due to complexation (-d2*m*E1) and increases due to decomplexation (d3*mE).  The change in the complex (mE) is exactly the opposite of the change in the enzyme.  As a result of this, we know that E1-E1(0)=-(mE-mE(0)) or, since mE(0)=0, E1-E0+mE=0.  In addition, we know that the concentration of GFP always depends on the product of mRNA(0)*kTL, so we will be able to reduce the number of parameters by rescaling (dividing by m0).

 With these observations, we can create our transformation definition:

 @code
 function transDef = M2_1_tDef()
     transDef.Name='M2_1_tDef';
     syms m G E1 mE m0 E0
     syms mdm0 E1dm0
     syms d1 d2 d3 b kTL
     syms d2tm0 kTLtm0 E0dm0
     transDef.Transformation = [m/m0;G;E1/m0];
     transDef.Constraint = [E1-E0+mE];
     transDef.P = [d1,d2tm0,d3,b,kTLtm0,E0dm0];
     transDef.Par = [d1,d2tm0,d3,b,kTLtm0,E0dm0];
     syms mnew Gnew E1new
     transDef.stateSubs = [mdm0,mnew;...
                           G,Gnew;...
                           E1dm0,E1new];
     transDef.parSubs = [d2*m0,d2tm0;...
                         kTL*m0,kTLtm0;...
                         E0/m0,E0dm0];
 end
 @endcode

 The transformation is defined by two variables. The first, transDef.Transformation, defines the rescaling. It contains one entry for each element of the final state vector. Since we are converting a model with 4 state variables to 3, this contains 3 elements. The second part of the definition is the constraint, transDef.Constraint. This will be equated to zero during the transformation, so it is E1-E0+mE=0, or, equivalently, E1-E1(0)=-(mE-mE(0)). The variable transDef.Constraint can contain multiple constraints, separated by a semicolon. Finally, there are two optional definitions of substitutions. They contain a variable number of rows, each of which is a substitution, or change of names. During the transformation process, new variables are created for the state vector and the parameters, and the names are changed via the rules "*"->"t" (for "times") and "/"->"d" (for "divided by").  These names can be considered as suggestions for the new names, and the user can override them with the stateSubs and parSubs definitions. For example, mdm0 is replaced by mnew in the state vector, and d2*m0 is replaced by d2tm0 in the parameters. It is considered good practice to leave these 2 definitions out the first time the transformation is run, and then add them in later in order to gain more control over the naming.

 This transformation is started by running the following line of code:

 @code genssiTransformation('M2_1_Y1','function','M2_1_tDef','M2_2_test'); @endcode

 The result of the transformation is the following new model:

 @code
 function model = M2_2_test()
     syms mnew Gnew E1new
     syms d1 d2tm0 d3 b kTLtm0 E0dm0
     model.Name = 'M2_2_test';
     model.Nder = 8;
     model.X = [mnew,Gnew,E1new];
     model.Neq = 3;
     model.G = [0,0,0,0];
     model.Noc = 0;
     model.P = [d1,d2tm0,d3,b,kTLtm0,E0dm0];
     model.Par = [d1,d2tm0,d3,b,kTLtm0,E0dm0];
     model.Npar = 6;
     model.IC = [1,0,E0dm0];
     model.H = [Gnew];
     model.Nobs = 1;
     model.F = [- d1*mnew - E1new*d2tm0*mnew,...
                kTLtm0*mnew - Gnew*b,...
                (E0*d3)/m0 - E1new*d2tm0*mnew - E1new*d3];
 end
 @endcode

 In this transformed model, the new state variables are mnew, Gnew, and E1new, based on the definition transDef.stateSubs.

 @subsection toamici Export to AMICI Format

 @code genssiToAmici(modelNameIn,modelNameOut) @endcode

 genssiToAMICI converts a GenSSI model to AMICI format. The AMICI package uses Sundials CVODES and IDAS to efficiently solve ODEs from within MATLAB. It is available at https://github.com/AMICI-developer/AMICI.

 modelNameIn: name of the GenSSI model (string).

 modelNameOut: name of the AMICI model (string).

 This is an important feature, since AMICI supports SBML import, thereby effectively providing GenSSI with an SBML import.

 Note: There are limitations to this conversion. The GenSSI model contains a list of parameters to be considered for analysis, but AMICI needs a "sym" statement containing a list of all parameters used by the model. It may be necessary to manually edit the AMICI model after conversion. In order to avoid this, the GenSSI model can contain a variable model.P, containing all parameters (model.Par only contains the parameters to be considered for identifiability).

 @subsection fromamici Import from AMICI Format (and SBML Models)

 @code genssiFromAmici(modelNameIn,modelNameOut) @endcode

 genssiFromAMICI converts an AMICI model to GenSSI format.

 modelNameIn: name of the AMICI model (string).

 modelNameOut: name of the GenSSI model (string).

 Note: There are limitations to this conversion. The AMICI model contains a list of all parameters used by the model, but GenSSI needs a list of parameters to be considered for analysis. In addition, the GenSSI model created by the conversion contains default values for parameters such as the number of derivatives. It may be necessary to manually edit the GenSSI model after conversion.

 @subsection structtosource Convert from Model Structure to Model Source Format

 @code genssiStructToSource(model) @endcode

 @code amiciStructToSource(model) @endcode

 genssiStructToSource reads the GenSSI model struct and converts it to source format (MATLAB function definition), and amiciStructToSource does the same for AMICI models. In general, the source format is more convenient for smaller models, since it is easier to modify, but the struct format, typically saved in a MATLAB file (e.g. Goodwin.mat) is more convenient for large models, since it does not require editing of long lines of code.

 model: model definition (struct).

 */
