**********************************************************************************
*                                                                                                      
* GENERATING SERIES approach for Structural Identifiability Analysis   
*                                                                                                      
* Oana Chis, Julio R. Banga and Eva Balsa-Canto                                
*  BioProcess Engineering Group, IIM-CSIC, Vigo-Spain                        
*  contact: [chisoana,julio,ebalsa]@iim.csic.es                                     
*                                                                                                        
**********************************************************************************

Matlab version=7.6.0.324 (R2008a)
Computer=PCWIN
options:
                verbose: 1
                 noRank: 0
    problem_folder_path: [1x75 char]

STRUCTURAL IDENTIFIABILITY ANALYSIS FOR: Goodwin Model
 

***************
* INPUT DATA 
***************

-----> Maximum number of derivatives for the analysis: 3
-----> Dynamic model:
	A1=-p4*x1+p1/(p2+x3^p3)
 
	A2=p5*x1-p6*x2
 
	A3=p7*x2-p8*x3
 
-----> Control variables:
-----> Observables:
	H1=x1
 
-----> Initial conditions:
	[  3/10,  9/10, 13/10]
 
-----> Parameters to be considered in the analysis:
	[ p1, p2, p4, p5, p6, p7, p8]
 



Report inputs elapsed time: 0.012578
*******************************
-> COMPUTE LIE DERIVATIVES
*******************************

COMPUTING LIE DERIVATIVES OF ORDER 1
.................................................................
Warning: Warning, unable to find a provably non-zero pivot
   ->The rank of the Jacobian generated by 1 derivatives is  3.
   ->The rank of the next Jacobian is expected to be maximum 6.
.................................................................
  
COMPUTING LIE DERIVATIVES OF ORDER 2
   
.................................................................
Warning: Warning, unable to find a provably non-zero pivot
   ->The rank of the Jacobian generated by 2 derivatives is  6.
   ->The rank of the next Jacobian is expected to be maximum 7.
.................................................................
  
COMPUTING LIE DERIVATIVES OF ORDER 3
   
.................................................................
Warning: Warning, unable to find a provably non-zero pivot
   ->The rank of the Jacobian generated by 3 derivatives is 7.
Compute Lie derivatives elapsed time: 0.072783


***************************************
-> COMPUTE IDENTIFIABILITY TABLEAU
***************************************
Warning: Warning, unable to find a provably non-zero pivot

 ----->The rank of the full Jacobian matrix is 7 

 ---->THE RANK OF THE FULL JACOBIAN IS COMPLETE, THUS AT LEAST LOCAL IDENTIFIABILITY IS GUARANTEED.
Compute tableau elapsed time: 0.10972


************************************************
-> COMPUTE REDUCED IDENTIFIABILITY TABLEAUS
************************************************
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot
Warning: Warning, unable to find a provably non-zero pivot


*****************************************************
-> THE RELATIONS NEEDED FOR COMPUTING THE PARAMETERS
*****************************************************

                                                                                                                                                                                                                                                                                                                                                                                     -3/10*p4+p1/(p2+(13/10)^p3)-c1
                                                                                                                                                                                                                                                                                                                                                                                                 3/10*p5-9/10*p6-c2
                                                                                                                                                                                                                                                                                                                                                                                                9/10*p7-13/10*p8-c3
                                                                                                                                                                                                                                                                                                                   -(-3/10*p4+p1/(p2+(13/10)^p3))*p4-10/13*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3-c4
                                                                                                                                                                                                                                                                                                                                                           (-3/10*p4+p1/(p2+(13/10)^p3))*p5-(3/10*p5-9/10*p6)*p6-c5
                                                                                                                                                                                                                                                                                                                                                                      (3/10*p5-9/10*p6)*p7-(9/10*p7-13/10*p8)*p8-c6
 (-3/10*p4+p1/(p2+(13/10)^p3))*p4^2-10/13*(3/10*p5-9/10*p6)*p7*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3+(9/10*p7-13/10*p8)*(10/13*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3*p4+10/13*p8*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3+200/169*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^3*((13/10)^p3)^2*p3^2-100/169*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3^2+100/169*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3)-c7
 
Compute reduced tableau  elapsed time: 0.18011


******************************************************************************************
-> DETECT (DIRECT) STRUCTURALLY GLOBALLY IDENTIFIABLE PARAMETERS AND REORGANIZES TABLEAU
*******************************************************************************************



 -> STRUCTURALLY GLOBALLY IDENTIFIABLE PARAMETERS DETERMINED DIRECTLY 
   (parameters corresponding to one non-zero element in the reduced identifiability tableau)



************************************************************************************************************
->THE REMAINING PARAMETERS (APART FROM IDENTIFIABLE OR NON-IDENTIFIABLE), AND THE CORRESPONDING RELATIONS  
************************************************************************************************************

-----> Parameters: 
[ p1, p2, p4, p5, p6, p7, p8]
 
-----> Relations: 
                                                                                                                                                                                                                                                                                                                                                                                     -3/10*p4+p1/(p2+(13/10)^p3)-c1
                                                                                                                                                                                                                                                                                                                                                                                                 3/10*p5-9/10*p6-c2
                                                                                                                                                                                                                                                                                                                                                                                                9/10*p7-13/10*p8-c3
                                                                                                                                                                                                                                                                                                                   -(-3/10*p4+p1/(p2+(13/10)^p3))*p4-10/13*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3-c4
                                                                                                                                                                                                                                                                                                                                                           (-3/10*p4+p1/(p2+(13/10)^p3))*p5-(3/10*p5-9/10*p6)*p6-c5
                                                                                                                                                                                                                                                                                                                                                                      (3/10*p5-9/10*p6)*p7-(9/10*p7-13/10*p8)*p8-c6
 (-3/10*p4+p1/(p2+(13/10)^p3))*p4^2-10/13*(3/10*p5-9/10*p6)*p7*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3+(9/10*p7-13/10*p8)*(10/13*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3*p4+10/13*p8*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3+200/169*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^3*((13/10)^p3)^2*p3^2-100/169*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3^2+100/169*(9/10*p7-13/10*p8)*p1/(p2+(13/10)^p3)^2*(13/10)^p3*p3)-c7
 
-----> THE SYMBOLIC SOLUTION OF THE REMAINING PARAMETERS: 
-----> The parameter p1 has the solution/solutions: 
  matrix([[1/130*c3*(-3000*c3^2*c1^3*p3^2*13^p3+2340*c3*p3*c4^2*13^p3+16900*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^4*13^p3-5070*c1^2*c7*13^p3+1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c7*c1*13^p3-16900*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^4*(13/10)^p3*10^p3-1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c4^2*13^p3+900*c3^2*p3^2*c1*c4*13^p3+1170*p3*c1*c6*c4*13^p3+3000*c3^2*c1^3*p3*13^p3+5070*c1^2*(13/10)^p3*c7*10^p3-3900*c1^3*p3*c6*13^p3-15210*c1*(13/10)^p3*c4^2*10^p3+15210*c1*c4^2*13^p3-33800*c1^3*c4*13^p3-26000*c3*c1^4*p3*13^p3+33800*c1^3*(13/10)^p3*c4*10^p3-900*c3^2*p3*c1*c4*13^p3-1170*c3*p3*c7*c1*13^p3+3900*c3*c1^2*p3*c4*13^p3+351/2*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c7*13^p3+5070*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*(13/10)^p3*c4*c1^2*10^p3-1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1*(13/10)^p3*c7*10^p3-2925*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c1*c4*13^p3-5070*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*c4*13^p3+135*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c4*13^p3+1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*(13/10)^p3*c4^2*10^p3-351/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c6*c4*13^p3+450*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*p3^2*13^p3+7800*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^3*p3*13^p3-135*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3^2*c4*13^p3+585*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*p3*c6*13^p3-450*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*p3*13^p3)/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)/(c4-1/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1)/(10^p3)],[1/130*c3*(-5070*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*c4*13^p3+135*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c4*13^p3-3000*c3^2*c1^3*p3^2*13^p3+2340*c3*p3*c4^2*13^p3-5070*c1^2*c7*13^p3+900*c3^2*p3^2*c1*c4*13^p3+1170*p3*c1*c6*c4*13^p3+3000*c3^2*c1^3*p3*13^p3+5070*c1^2*(13/10)^p3*c7*10^p3-3900*c1^3*p3*c6*13^p3-15210*c1*(13/10)^p3*c4^2*10^p3+15210*c1*c4^2*13^p3-33800*c1^3*c4*13^p3-26000*c3*c1^4*p3*13^p3+33800*c1^3*(13/10)^p3*c4*10^p3-900*c3^2*p3*c1*c4*13^p3-1170*c3*p3*c7*c1*13^p3+3900*c3*c1^2*p3*c4*13^p3+1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*(13/10)^p3*c4^2*10^p3+7800*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^3*p3*13^p3+351/2*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c7*13^p3+5070*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*(13/10)^p3*c4*c1^2*10^p3+1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c7*c1*13^p3-16900*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^4*(13/10)^p3*10^p3-1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c4^2*13^p3+16900*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^4*13^p3-1521/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1*(13/10)^p3*c7*10^p3-2925*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c1*c4*13^p3-135*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3^2*c4*13^p3-351/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*p3*c6*c4*13^p3+450*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*p3^2*13^p3+585*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*p3*c6*13^p3-450*c3^2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1^2*p3*13^p3)/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)/(c4-1/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1)/(10^p3)]])
-----> The parameter p2 has the solution/solutions: 
  matrix([[-13^(-1+p3)*10^(-p3)*(-3/2*p3*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)+13*c4-13/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1+10*c1*c3*p3)/(c4-1/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1)],[-13^(-1+p3)*10^(-p3)*(-3/2*p3*c3*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)+13*c4-13/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1+10*c1*c3*p3)/(c4-1/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)*c1)]])
-----> The parameter p4 has the solution/solutions: 
  matrix([[-1/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4-(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)],[-1/2*(-100*c1^2*c3^2-30*c3^2*c4-39*c7*c3+130*c1^2*c6+100*p3*c1^2*c3^2+30*p3*c3^2*c4+39*c6*c4+390*c3*c1*c4+(-6000*c1^2*c3^4*c4-7800*c1^2*c3^3*c7-26000*c1^4*c3^2*c6-20000*c1^4*c3^4*p3+26000*c1^3*c3^3*c4+2340*c3^3*c4*c7-1800*c3^4*c4^2*p3-2340*c3^2*c4^2*c6-7800*c3^3*c4^2*c1+12000*c1^2*c3^4*p3*c4-10140*c1^2*c6^2*c4+10000*p3^2*c1^4*c3^4+900*p3^2*c3^4*c4^2-118300*c3^2*c1^2*c4^2+135200*c3^2*c1^3*c7+15600*c1^2*c3^2*c6*c4+10140*c7*c3*c1^2*c6+7800*c7*c3^3*p3*c1^2-2340*c7*c3^3*p3*c4-3042*c7*c3*c6*c4-50700*c7*c3^2*c1*c4+26000*c1^4*c6*p3*c3^2+7800*p3*c3^3*c4^2*c1+10140*c6*c4^2*c3*c1-15600*c1^2*c6*p3*c3^2*c4-33800*c1^3*c6*c3*c4-6000*p3^2*c1^2*c3^4*c4-26000*p3*c1^3*c3^3*c4+2340*p3*c3^2*c4^2*c6+10000*c1^4*c3^4+900*c3^4*c4^2+1521*c7^2*c3^2+16900*c1^4*c6^2+1521*c6^2*c4^2+40560*c3^2*c4^3)^(1/2))/(-39*c3*c4+260*c3*c1^2-30*c3^2*c1+39*c6*c1+30*p3*c1*c3^2)]])
-----> The parameter p5 has the solution/solutions: 
  matrix([[-1/3*(10*c2^2-9*c5)/(3*c1-c2)],[-1/3*(10*c2^2-9*c5)/(3*c1-c2)]])
-----> The parameter p6 has the solution/solutions: 
  matrix([[-1/3*(-3*c5+10*c2*c1)/(3*c1-c2)],[-1/3*(-3*c5+10*c2*c1)/(3*c1-c2)]])
-----> The parameter p7 has the solution/solutions: 
  matrix([[(10*c3^2-13*c6)/(-13*c2+9*c3)],[(10*c3^2-13*c6)/(-13*c2+9*c3)]])
-----> The parameter p8 has the solution/solutions: 
  matrix([[(-9*c6+10*c3*c2)/(-13*c2+9*c3)],[(-9*c6+10*c3*c2)/(-13*c2+9*c3)]])
Order tableau elapsed time: 0.22104


***************************************************************

 -----> THE MODEL IS STRUCTURALLY LOCALLY IDENTIFIABLE 

***************************************************************

        The structurally globally identifiable parameters are: 

         	None

        The structurally locally identifiable parameters are: 

     	[      p1	      p2	      p4	      p5	      p6	      p7	      p8	]


Report results elapsed time: 0.00098344
Total elapsed time: 0.59927
