**********************************************************************************
*                                                                                                      
* GENERATING SERIES approach for Structural Identifiability Analysis   
*                                                                                                      
* Oana Chis, Julio R. Banga and Eva Balsa-Canto                                
*  BioProcess Engineering Group, IIM-CSIC, Vigo-Spain                        
*  contact: [chisoana,julio,ebalsa]@iim.csic.es                                     
*                                                                                                        
**********************************************************************************

Matlab version=9.1.0.441655 (R2016b)
Computer=PCWIN64
options:
                verbose: 1
                 noRank: 0
    problem_folder_path: 'D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\Results\Goodwin\run1'

STRUCTURAL IDENTIFIABILITY ANALYSIS FOR: Goodwin Model
 

***************
* INPUT DATA 
***************

-----> Maximum number of derivatives for the analysis: 3
-----> Dynamic model:
	A1=p1/(p2 + x3^p3) - p4*x1
 
	A2=p5*x1 - p6*x2
 
	A3=p7*x2 - p8*x3
 
-----> Control variables:
-----> Observables:
	H1=x1
 
-----> Initial conditions:
	[ 3/10, 9/10, 13/10]
 
-----> Parameters to be considered in the analysis:
	[ p1, p2, p4, p5, p6, p7, p8]
 



Report inputs elapsed time: 0.080002
*******************************
-> COMPUTE LIE DERIVATIVES
*******************************

COMPUTING LIE DERIVATIVES OF ORDER 1
.................................................................
   ->The rank of the Jacobian generated by 1 derivatives is  3.
   ->The rank of the next Jacobian is expected to be maximum 6.
.................................................................
  
COMPUTING LIE DERIVATIVES OF ORDER 2
   
.................................................................
   ->The rank of the Jacobian generated by 2 derivatives is  6.
   ->The rank of the next Jacobian is expected to be maximum 7.
.................................................................
  
COMPUTING LIE DERIVATIVES OF ORDER 3
   
.................................................................
   ->The rank of the Jacobian generated by 3 derivatives is 7.
Compute Lie derivatives elapsed time: 0.1646


***************************************
-> COMPUTE IDENTIFIABILITY TABLEAU
***************************************

 ----->The rank of the full Jacobian matrix is 7 

 ---->THE RANK OF THE FULL JACOBIAN IS COMPLETE, THUS AT LEAST LOCAL IDENTIFIABILITY IS GUARANTEED.
Compute tableau elapsed time: 0.25083


************************************************
-> COMPUTE REDUCED IDENTIFIABILITY TABLEAUS
************************************************


*****************************************************
-> THE RELATIONS NEEDED FOR COMPUTING THE PARAMETERS
*****************************************************

                                                                                                                                                                                                                                                                                                                                                                                p1/(p2 + (13/10)^p3) - (3*p4)/10 - c1
                                                                                                                                                                                                                                                                                                                                                                                           (3*p5)/10 - c2 - (9*p6)/10
                                                                                                                                                                                                                                                                                                                                                                                          (9*p7)/10 - c3 - (13*p8)/10
                                                                                                                                                                                                                                                                                                   p4*((3*p4)/10 - p1/(p2 + (13/10)^p3)) - c4 - ((13/10)^(p3 - 1)*p1*p3*((9*p7)/10 - (13*p8)/10))/(p2 + (13/10)^p3)^2
                                                                                                                                                                                                                                                                                                                                            - c5 - p5*((3*p4)/10 - p1/(p2 + (13/10)^p3)) - p6*((3*p5)/10 - (9*p6)/10)
                                                                                                                                                                                                                                                                                                                                                        p7*((3*p5)/10 - (9*p6)/10) - c6 - p8*((9*p7)/10 - (13*p8)/10)
 ((9*p7)/10 - (13*p8)/10)*((2*(13/10)^(2*p3 - 2)*p1*p3^2*((9*p7)/10 - (13*p8)/10))/(p2 + (13/10)^p3)^3 + ((13/10)^(p3 - 1)*p1*p3*p4)/(p2 + (13/10)^p3)^2 + ((13/10)^(p3 - 1)*p1*p3*p8)/(p2 + (13/10)^p3)^2 - ((13/10)^(p3 - 2)*p1*p3*(p3 - 1)*((9*p7)/10 - (13*p8)/10))/(p2 + (13/10)^p3)^2) - p4^2*((3*p4)/10 - p1/(p2 + (13/10)^p3)) - c7 - ((13/10)^(p3 - 1)*p1*p3*p7*((3*p5)/10 - (9*p6)/10))/(p2 + (13/10)^p3)^2
 
Compute reduced tableau  elapsed time: 0.36622


******************************************************************************************
-> DETECT (DIRECT) STRUCTURALLY GLOBALLY IDENTIFIABLE PARAMETERS AND REORGANIZES TABLEAU
*******************************************************************************************



 -> STRUCTURALLY GLOBALLY IDENTIFIABLE PARAMETERS DETERMINED DIRECTLY 
   (parameters corresponding to one non-zero element in the reduced identifiability tableau)



************************************************************************************************************
->THE REMAINING PARAMETERS (APART FROM IDENTIFIABLE OR NON-IDENTIFIABLE), AND THE CORRESPONDING RELATIONS  
************************************************************************************************************

-----> Parameters: 
[ p1, p2, p4, p5, p6, p7, p8]
 
-----> Relations: 
                                                                                                                                                                                                                                                                                                                                                                                p1/(p2 + (13/10)^p3) - (3*p4)/10 - c1
                                                                                                                                                                                                                                                                                                                                                                                           (3*p5)/10 - c2 - (9*p6)/10
                                                                                                                                                                                                                                                                                                                                                                                          (9*p7)/10 - c3 - (13*p8)/10
                                                                                                                                                                                                                                                                                                   p4*((3*p4)/10 - p1/(p2 + (13/10)^p3)) - c4 - ((13/10)^(p3 - 1)*p1*p3*((9*p7)/10 - (13*p8)/10))/(p2 + (13/10)^p3)^2
                                                                                                                                                                                                                                                                                                                                            - c5 - p5*((3*p4)/10 - p1/(p2 + (13/10)^p3)) - p6*((3*p5)/10 - (9*p6)/10)
                                                                                                                                                                                                                                                                                                                                                        p7*((3*p5)/10 - (9*p6)/10) - c6 - p8*((9*p7)/10 - (13*p8)/10)
 ((9*p7)/10 - (13*p8)/10)*((2*(13/10)^(2*p3 - 2)*p1*p3^2*((9*p7)/10 - (13*p8)/10))/(p2 + (13/10)^p3)^3 + ((13/10)^(p3 - 1)*p1*p3*p4)/(p2 + (13/10)^p3)^2 + ((13/10)^(p3 - 1)*p1*p3*p8)/(p2 + (13/10)^p3)^2 - ((13/10)^(p3 - 2)*p1*p3*(p3 - 1)*((9*p7)/10 - (13*p8)/10))/(p2 + (13/10)^p3)^2) - p4^2*((3*p4)/10 - p1/(p2 + (13/10)^p3)) - c7 - ((13/10)^(p3 - 1)*p1*p3*p7*((3*p5)/10 - (9*p6)/10))/(p2 + (13/10)^p3)^2
 
-----> THE SYMBOLIC SOLUTION OF THE REMAINING PARAMETERS: 
[Warning: The solutions are valid under the following conditions: 39*c1*c6 + 260*c1^2*c3 + 30*c1*c3^2*p3 ~= 39*c3*c4 + 30*c1*c3^2 & 39*c3*c7 + 130*c1^2*c6 +
30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 +
26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 -
1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 -
50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 -
26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) +
100*c1^2*c3^2*p3 ~= 39*c4*c6 + 100*c1^2*c3^2 + 130*c1*c3*c4 + 30*c3^2*c4*p3 & 39*c4*c6 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 +
1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 -
26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 +
2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 +
15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 +
2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2 + 130*c1*c3*c4 + 30*c3^2*c4*p3 ~= 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4
+ 100*c1^2*c3^2*p3 & p3 ~= 0;
39*c1*c6 + 260*c1^2*c3 + 30*c1*c3^2*p3 ~= 39*c3*c4 + 30*c1*c3^2 & 39*c4*c6 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 +
1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 -
26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 +
2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 +
15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 +
2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2 + 130*c1*c3*c4 + 30*c3^2*c4*p3 == 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4
+ 100*c1^2*c3^2*p3 & 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 +
1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6
- 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 -
6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 +
7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 -
15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2*p3 ~= 39*c4*c6 + 100*c1^2*c3^2 + 130*c1*c3*c4 + 30*c3^2*c4*p3 & p3 ~= 0;
39*c1*c6 + 260*c1^2*c3 + 30*c1*c3^2*p3 ~= 39*c3*c4 + 30*c1*c3^2 & 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 +
900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 +
135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 +
900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 -
2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 +
26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2*p3 ~= 39*c4*c6 + 100*c1^2*c3^2 + 130*c1*c3*c4
+ 30*c3^2*c4*p3 & 39*c4*c6 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 -
6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 -
20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 +
10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 +
12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 -
15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2 + 130*c1*c3*c4 + 30*c3^2*c4*p3 ~= 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4 + 100*c1^2*c3^2*p3 & p3 ~= 0;
39*c1*c6 + 260*c1^2*c3 + 30*c1*c3^2*p3 ~= 39*c3*c4 + 30*c1*c3^2 & 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 +
900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 +
135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 +
900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 -
2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 +
26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2*p3 == 39*c4*c6 + 100*c1^2*c3^2 + 130*c1*c3*c4
+ 30*c3^2*c4*p3 & 39*c4*c6 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 -
6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 -
20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 +
10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 +
12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 -
15600*c1^2*c3^2*c4*c6*p3)^(1/2) + 100*c1^2*c3^2 + 130*c1*c3*c4 + 30*c3^2*c4*p3 ~= 39*c3*c7 + 130*c1^2*c6 + 30*c3^2*c4 + 100*c1^2*c3^2*p3 & p3 ~= 0.
 To include parameters and conditions in the solution, specify the 'ReturnConditions' option.] 
[> In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('solve>warnIfParams', 'C:\Program Files\MATLAB\R2016b\toolbox\symbolic\symbolic\solve.m', 507)" style="font-weight:bold">solve>warnIfParams</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2016b\toolbox\symbolic\symbolic\solve.m',507,0)">line 507</a>)
  In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('solve', 'C:\Program Files\MATLAB\R2016b\toolbox\symbolic\symbolic\solve.m', 356)" style="font-weight:bold">solve</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2016b\toolbox\symbolic\symbolic\solve.m',356,0)">line 356</a>)
  In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('genssiOrderTableau>solveRemPar', 'D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\genssiOrderTableau.m', 682)" style="font-weight:bold">genssiOrderTableau>solveRemPar</a> (<a href="matlab: opentoline('D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\genssiOrderTableau.m',682,0)">line 682</a>)
  In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('genssiOrderTableau', 'D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\genssiOrderTableau.m', 223)" style="font-weight:bold">genssiOrderTableau</a> (<a href="matlab: opentoline('D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\genssiOrderTableau.m',223,0)">line 223</a>)
  In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('genssiMain', 'D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\genssiMain.m', 87)" style="font-weight:bold">genssiMain</a> (<a href="matlab: opentoline('D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\genssiMain.m',87,0)">line 87</a>)
  In <a href="matlab:matlab.internal.language.introspective.errorDocCallback('runAll', 'D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\runAll.m', 11)" style="font-weight:bold">runAll</a> (<a href="matlab: opentoline('D:\data\Tom\Research\Raedler\mRNA-Helmholtz\Tom\GenSSI\runAll.m',11,0)">line 11</a>)] 
-----> The parameter p1 has the solution/solutions: 
  matrix([[((117*(13/10)^p3*c3*c7*p3 - 90*(13/10)^p3*c3^2*c4*p3^2 - 300*(13/10)^p3*c1^2*c3^2*p3 - 117*(13/10)^p3*c4*c6*p3 + 300*(13/10)^p3*c1^2*c3^2*p3^2 + 2600*(13/10)^p3*c1^3*c3*p3 + 390*(13/10)^p3*c1^2*c6*p3 + 90*(13/10)^p3*c3^2*c4*p3 - 1170*(13/10)^p3*c1*c3*c4*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 - (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(3380*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (100*(13/10)^p3*c1^3*c3^2*p3^2 - 100*(13/10)^p3*c1^3*c3^2*p3 - 78*(13/10)^p3*c3*c4^2*p3 + 130*(13/10)^p3*c1^3*c6*p3 + 30*(13/10)^p3*c1*c3^2*c4*p3 + 130*(13/10)^p3*c1^2*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*c4*p3^2 + 39*(13/10)^p3*c1*c3*c7*p3 - 39*(13/10)^p3*c1*c4*c6*p3)/(169*(c1*c7 - c4^2))], [((117*(13/10)^p3*c3*c7*p3 - 90*(13/10)^p3*c3^2*c4*p3^2 - 300*(13/10)^p3*c1^2*c3^2*p3 - 117*(13/10)^p3*c4*c6*p3 + 300*(13/10)^p3*c1^2*c3^2*p3^2 + 2600*(13/10)^p3*c1^3*c3*p3 + 390*(13/10)^p3*c1^2*c6*p3 + 90*(13/10)^p3*c3^2*c4*p3 - 1170*(13/10)^p3*c1*c3*c4*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 - (10000*c1^4*c3^4 + 5070*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 16900*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 15210*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(3380*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (100*(13/10)^p3*c1^3*c3^2*p3^2 - 100*(13/10)^p3*c1^3*c3^2*p3 - 78*(13/10)^p3*c3*c4^2*p3 + 130*(13/10)^p3*c1^3*c6*p3 + 30*(13/10)^p3*c1*c3^2*c4*p3 + 130*(13/10)^p3*c1^2*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*c4*p3^2 + 39*(13/10)^p3*c1*c3*c7*p3 - 39*(13/10)^p3*c1*c4*c6*p3)/(169*(c1*c7 - c4^2))], [((117*(13/10)^p3*c3*c7*p3 - 90*(13/10)^p3*c3^2*c4*p3^2 - 300*(13/10)^p3*c1^2*c3^2*p3 - 117*(13/10)^p3*c4*c6*p3 + 300*(13/10)^p3*c1^2*c3^2*p3^2 + 2600*(13/10)^p3*c1^3*c3*p3 + 390*(13/10)^p3*c1^2*c6*p3 + 90*(13/10)^p3*c3^2*c4*p3 - 1170*(13/10)^p3*c1*c3*c4*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(3380*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (100*(13/10)^p3*c1^3*c3^2*p3^2 - 100*(13/10)^p3*c1^3*c3^2*p3 - 78*(13/10)^p3*c3*c4^2*p3 + 130*(13/10)^p3*c1^3*c6*p3 + 30*(13/10)^p3*c1*c3^2*c4*p3 + 130*(13/10)^p3*c1^2*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*c4*p3^2 + 39*(13/10)^p3*c1*c3*c7*p3 - 39*(13/10)^p3*c1*c4*c6*p3)/(169*(c1*c7 - c4^2))], [((117*(13/10)^p3*c3*c7*p3 - 90*(13/10)^p3*c3^2*c4*p3^2 - 300*(13/10)^p3*c1^2*c3^2*p3 - 117*(13/10)^p3*c4*c6*p3 + 300*(13/10)^p3*c1^2*c3^2*p3^2 + 2600*(13/10)^p3*c1^3*c3*p3 + 390*(13/10)^p3*c1^2*c6*p3 + 90*(13/10)^p3*c3^2*c4*p3 - 1170*(13/10)^p3*c1*c3*c4*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 + (10000*c1^4*c3^4 + 5070*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 16900*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 15210*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(3380*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (100*(13/10)^p3*c1^3*c3^2*p3^2 - 100*(13/10)^p3*c1^3*c3^2*p3 - 78*(13/10)^p3*c3*c4^2*p3 + 130*(13/10)^p3*c1^3*c6*p3 + 30*(13/10)^p3*c1*c3^2*c4*p3 + 130*(13/10)^p3*c1^2*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*c4*p3^2 + 39*(13/10)^p3*c1*c3*c7*p3 - 39*(13/10)^p3*c1*c4*c6*p3)/(169*(c1*c7 - c4^2))]])
-----> The parameter p2 has the solution/solutions: 
  matrix([[((30*(13/10)^p3*c1*c3^2*p3^2 + 39*(13/10)^p3*c1*c6*p3 - 39*(13/10)^p3*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*p3 + 260*(13/10)^p3*c1^2*c3*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 - (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(338*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (169*(13/10)^p3*c1*c7 - 169*(13/10)^p3*c4^2 - 100*(13/10)^p3*c1^2*c3^2*p3 + 100*(13/10)^p3*c1^2*c3^2*p3^2 + 130*(13/10)^p3*c1^2*c6*p3 + 130*(13/10)^p3*c1*c3*c4*p3)/(169*(c1*c7 - c4^2))], [((30*(13/10)^p3*c1*c3^2*p3^2 + 39*(13/10)^p3*c1*c6*p3 - 39*(13/10)^p3*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*p3 + 260*(13/10)^p3*c1^2*c3*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 - (10000*c1^4*c3^4 + 5070*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 16900*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 15210*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(338*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (169*(13/10)^p3*c1*c7 - 169*(13/10)^p3*c4^2 - 100*(13/10)^p3*c1^2*c3^2*p3 + 100*(13/10)^p3*c1^2*c3^2*p3^2 + 130*(13/10)^p3*c1^2*c6*p3 + 130*(13/10)^p3*c1*c3*c4*p3)/(169*(c1*c7 - c4^2))], [((30*(13/10)^p3*c1*c3^2*p3^2 + 39*(13/10)^p3*c1*c6*p3 - 39*(13/10)^p3*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*p3 + 260*(13/10)^p3*c1^2*c3*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(338*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (169*(13/10)^p3*c1*c7 - 169*(13/10)^p3*c4^2 - 100*(13/10)^p3*c1^2*c3^2*p3 + 100*(13/10)^p3*c1^2*c3^2*p3^2 + 130*(13/10)^p3*c1^2*c6*p3 + 130*(13/10)^p3*c1*c3*c4*p3)/(169*(c1*c7 - c4^2))], [((30*(13/10)^p3*c1*c3^2*p3^2 + 39*(13/10)^p3*c1*c6*p3 - 39*(13/10)^p3*c3*c4*p3 - 30*(13/10)^p3*c1*c3^2*p3 + 260*(13/10)^p3*c1^2*c3*p3)*(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 + (10000*c1^4*c3^4 + 5070*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 16900*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 15210*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3))/(338*(c1*c7 - c4^2)*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3)) - (169*(13/10)^p3*c1*c7 - 169*(13/10)^p3*c4^2 - 100*(13/10)^p3*c1^2*c3^2*p3 + 100*(13/10)^p3*c1^2*c3^2*p3^2 + 130*(13/10)^p3*c1^2*c6*p3 + 130*(13/10)^p3*c1*c3*c4*p3)/(169*(c1*c7 - c4^2))]])
-----> The parameter p4 has the solution/solutions: 
  matrix([[-(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 - (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3)/(2*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3))], [-(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 - (10000*c1^4*c3^4 + 5070*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 16900*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 15210*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3)/(2*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3))], [-(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 + (10000*c1^4*c3^4 + 40560*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 135200*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 - 118300*c1^2*c3^2*c4^2 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 50700*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3)/(2*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3))], [-(39*c4*c6 - 39*c3*c7 + 130*c1^2*c6 - 30*c3^2*c4 + (10000*c1^4*c3^4 + 5070*c3^2*c4^3 + 16900*c1^4*c6^2 + 900*c3^4*c4^2 + 1521*c3^2*c7^2 + 1521*c4^2*c6^2 - 7800*c1*c3^3*c4^2 - 6000*c1^2*c3^4*c4 + 26000*c1^3*c3^3*c4 - 10140*c1^2*c4*c6^2 - 7800*c1^2*c3^3*c7 + 16900*c1^3*c3^2*c7 - 26000*c1^4*c3^2*c6 - 2340*c3^2*c4^2*c6 - 20000*c1^4*c3^4*p3 - 1800*c3^4*c4^2*p3 + 10000*c1^4*c3^4*p3^2 + 900*c3^4*c4^2*p3^2 + 2340*c3^3*c4*c7 - 6000*c1^2*c3^4*c4*p3^2 + 10140*c1*c3*c4^2*c6 - 15210*c1*c3^2*c4*c7 - 33800*c1^3*c3*c4*c6 + 10140*c1^2*c3*c6*c7 - 2340*c3^3*c4*c7*p3 + 15600*c1^2*c3^2*c4*c6 + 7800*c1*c3^3*c4^2*p3 + 12000*c1^2*c3^4*c4*p3 - 26000*c1^3*c3^3*c4*p3 + 7800*c1^2*c3^3*c7*p3 + 26000*c1^4*c3^2*c6*p3 + 2340*c3^2*c4^2*c6*p3 - 3042*c3*c4*c6*c7 - 15600*c1^2*c3^2*c4*c6*p3)^(1/2) - 100*c1^2*c3^2 + 100*c1^2*c3^2*p3 + 390*c1*c3*c4 + 30*c3^2*c4*p3)/(2*(39*c1*c6 - 39*c3*c4 - 30*c1*c3^2 + 260*c1^2*c3 + 30*c1*c3^2*p3))]])
-----> The parameter p5 has the solution/solutions: 
  matrix([[(9*c5 - 10*c2^2)/(9*c1 - 3*c2)], [(9*c5 - 10*c2^2)/(9*c1 - 3*c2)], [(9*c5 - 10*c2^2)/(9*c1 - 3*c2)], [(9*c5 - 10*c2^2)/(9*c1 - 3*c2)]])
-----> The parameter p6 has the solution/solutions: 
  matrix([[(3*c5 - 10*c1*c2)/(9*c1 - 3*c2)], [(3*c5 - 10*c1*c2)/(9*c1 - 3*c2)], [(3*c5 - 10*c1*c2)/(9*c1 - 3*c2)], [(3*c5 - 10*c1*c2)/(9*c1 - 3*c2)]])
-----> The parameter p7 has the solution/solutions: 
  matrix([[(13*c6 - 10*c3^2)/(13*c2 - 9*c3)], [(13*c6 - 10*c3^2)/(13*c2 - 9*c3)], [(13*c6 - 10*c3^2)/(13*c2 - 9*c3)], [(13*c6 - 10*c3^2)/(13*c2 - 9*c3)]])
-----> The parameter p8 has the solution/solutions: 
  matrix([[(9*c6 - 10*c2*c3)/(13*c2 - 9*c3)], [(9*c6 - 10*c2*c3)/(13*c2 - 9*c3)], [(9*c6 - 10*c2*c3)/(13*c2 - 9*c3)], [(9*c6 - 10*c2*c3)/(13*c2 - 9*c3)]])
Order tableau elapsed time: 1.9594


***************************************************************

 -----> THE MODEL IS STRUCTURALLY LOCALLY IDENTIFIABLE 

***************************************************************

        The structurally globally identifiable parameters are: 

         	None

        The structurally locally identifiable parameters are: 

     	[      p1	      p2	      p4	      p5	      p6	      p7	      p8	]


Report results elapsed time: 0.015624
Total elapsed time: 2.8378
